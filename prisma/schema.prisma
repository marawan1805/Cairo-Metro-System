datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"`
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  phoneNumber      String          @unique
  password         String
  role             UserRole
  tickets          Ticket[]
  senior           SeniorRequest?  @relation("seniorRequestUser")
  virtualRides     VirtualRide[]
  reviewedRequests SeniorRequest[] @relation("seniorRequestAdmin")
  OTP              OTP[]
  RefundRequest    RefundRequest[]
}

enum UserRole {
  User
  Senior
  Admin
}

model OTP {
  id        Int      @id @default(autoincrement())
  code      String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

model Station {
  id                Int     @id @default(autoincrement())
  name              String  @unique
  originRoutes      Route[] @relation("origin")
  destinationRoutes Route[] @relation("destination")
}

model Route {
  id            Int           @id @default(autoincrement())
  originId      Int
  destinationId Int
  origin        Station       @relation("origin", fields: [originId], references: [id])
  destination   Station       @relation("destination", fields: [destinationId], references: [id])
  price         Float
  schedule      Schedule[]
  VirtualRide   VirtualRide[]
}

model Schedule {
  id        Int      @id @default(autoincrement())
  routeId   Int
  route     Route    @relation(fields: [routeId], references: [id])
  startTime DateTime
  endTime   DateTime
}

model Ticket {
  id            Int             @id @default(autoincrement())
  userId        Int
  user          User            @relation(fields: [userId], references: [id])
  routeId       Int
  route         Route           @relation(fields: [routeId], references: [id])
  subscription  Subscription
  count         Int
  passedCount   Int
  createdAt     DateTime        @default(now())
  RefundRequest RefundRequest[]
}

enum Subscription {
  Monthly
  Quarterly
  Annual
}

model VirtualRide {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  routeId   Int
  route     Route    @relation(fields: [routeId], references: [id])
  startTime DateTime
  endTime   DateTime
}

model SeniorRequest {
  id         Int                 @id @default(autoincrement())
  userId     Int                 @unique
  user       User                @relation("seniorRequestUser", fields: [userId], references: [id])
  idImage    String
  status     SeniorRequestStatus
  reviewedBy Int?
  admin      User?               @relation("seniorRequestAdmin", fields: [reviewedBy], references: [id])
  createdAt  DateTime            @default(now())
}

enum SeniorRequestStatus {
  Pending
  Approved
  Rejected
}

model RefundRequest {
  id         Int                 @id @default(autoincrement())
  ticketId   Int
  ticket     Ticket              @relation(fields: [ticketId], references: [id])
  description String
  status     RefundRequestStatus
  reviewedBy Int?
  admin      User?               @relation(fields: [reviewedBy], references: [id])
  createdAt  DateTime            @default(now())
}

enum RefundRequestStatus {
  Pending
  Approved
  Rejected
}
